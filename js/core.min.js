function setInputFilter(e, t) {
    ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function(n) {
        e.addEventListener(n, function() {
            t(this.value) ? (this.oldValue = this.value, this.oldSelectionStart = this.selectionStart, this.oldSelectionEnd = this.selectionEnd) : this.hasOwnProperty("oldValue") ? (this.value = this.oldValue, this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd)) : this.value = ""
        })
    })
}

function querySt(e) {
    return url = window.location.search.substring(1), res = url.split("="), res[0] === e ? res[1] : ""
}

function onload() {
    return new Promise(function(e, t) {
        if ("complete" === document.readyState) return e();
        window.addEventListener("load", e)
    })
}

function getreflink() {
    var e = document.getElementById("refferal").value,
        t = document.getElementById("url");
    t.href = "/claim?reff=" + e, t.innerHTML = "https://versaceswap.com/claim.html?reff=" + e
}

function copyToClipboard(e) {
    var t = document.getElementById(e).innerHTML;
    if (window.clipboardData && window.clipboardData.setData) return clipboardData.setData("Text", t);
    if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
        var n = document.createElement("textarea");
        n.textContent = t, n.style.position = "fixed", document.body.appendChild(n), n.select();
        try {
            return document.execCommand("copy")
        } catch (e) {
            return console.warn("Copy to clipboard failed.", e), !1
        } finally {
            document.body.removeChild(n)
        }
    }
}! function(e) {
    AOS.init({
        duration: 1200
    }), e(".scroll-btn").on("click", function(t) {
        t.preventDefault(), e("html, body").animate({
            scrollTop: e(e(this).attr("href")).offset().top
        }, 500, "linear")
    }), e(".particle-class").each(function() {
        particlesJS(e(this).attr("id"), {
            particles: {
                number: {
                    value: 355,
                    density: {
                        enable: !0,
                        value_area: 789.1476416322727
                    }
                },
                color: {
                    value: "#D490AF"
                },
                shape: {
                    type: "circle",
                    stroke: {
                        width: 0,
                        color: "#000000"
                    },
                    polygon: {
                        nb_sides: 5
                    },
                    image: {
                        src: "img/github.svg",
                        width: 100,
                        height: 100
                    }
                },
                opacity: {
                    value: .48927153781200905,
                    random: !1,
                    anim: {
                        enable: !0,
                        speed: .2,
                        opacity_min: 0,
                        sync: !1
                    }
                },
                size: {
                    value: 2,
                    random: !0,
                    anim: {
                        enable: !0,
                        speed: 2,
                        size_min: 0,
                        sync: !1
                    }
                },
                line_linked: {
                    enable: !1,
                    distance: 150,
                    color: "#ffe600fff",
                    opacity: .4,
                    width: 1
                },
                move: {
                    enable: !0,
                    speed: .2,
                    direction: "none",
                    random: !0,
                    straight: !1,
                    out_mode: "out",
                    bounce: !1,
                    attract: {
                        enable: !1,
                        rotateX: 600,
                        rotateY: 1200
                    }
                }
            },
            interactivity: {
                detect_on: "canvas",
                events: {
                    onhover: {
                        enable: !0,
                        mode: "bubble"
                    },
                    onclick: {
                        enable: !0,
                        mode: "push"
                    },
                    resize: !0
                },
                modes: {
                    grab: {
                        distance: 400,
                        line_linked: {
                            opacity: 1
                        }
                    },
                    bubble: {
                        distance: 83.91608391608392,
                        size: 1,
                        duration: 3,
                        opacity: 1,
                        speed: 3
                    },
                    repulse: {
                        distance: 200,
                        duration: .4
                    },
                    push: {
                        particles_nb: 4
                    },
                    remove: {
                        particles_nb: 2
                    }
                }
            },
            retina_detect: !0
        })
    }), e.fn.countdown = function(t, n) {
        thisEl = e(this);
        var i = {
            date: null,
            format: null
        };

        function o() {
            var t = Date.parse(i.date) / 1e3,
                o = Math.floor(e.now() / 1e3);
            t <= o && (n.call(this), clearInterval(interval));
            var a = t - o,
                r = Math.floor(a / 86200);
            a -= 60 * r * 60 * 24;
            var l = Math.floor(a / 3600);
            a -= 60 * l * 60;
            var s = Math.floor(a / 60);
            a -= 60 * s, 1 == r ? thisEl.find(".timeRefDays").text("day") : thisEl.find(".timeRefDays").text("days"), 1 == l ? thisEl.find(".timeRefHours").text("hour") : thisEl.find(".timeRefHours").text("hours"), 1 == s ? thisEl.find(".timeRefMinutes").text("minute") : thisEl.find(".timeRefMinutes").text("minutes"), 1 == a ? thisEl.find(".timeRefSeconds").text("second") : thisEl.find(".timeRefSeconds").text("seconds"), "on" == i.format && (r = String(r).length >= 2 ? r : "0" + r, l = String(l).length >= 2 ? l : "0" + l, s = String(s).length >= 2 ? s : "0" + s, a = String(a).length >= 2 ? a : "0" + a), thisEl.find(".days").text(r), thisEl.find(".hours").text(l), thisEl.find(".minutes").text(s), thisEl.find(".seconds").text(a)
        }
        t && e.extend(i, t), o(), interval = setInterval(o, 1e3)
    }
}(jQuery);